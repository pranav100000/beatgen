/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StudioImport } from './routes/studio'
import { Route as SettingsImport } from './routes/settings'
import { Route as SamplerTracksImport } from './routes/sampler-tracks'
import { Route as RegisterImport } from './routes/register'
import { Route as ProjectsImport } from './routes/projects'
import { Route as OauthCallbackImport } from './routes/oauth-callback'
import { Route as MidiTracksImport } from './routes/midi-tracks'
import { Route as LoginImport } from './routes/login'
import { Route as HomeImport } from './routes/home'
import { Route as DrumTracksImport } from './routes/drum-tracks'
import { Route as AudioTracksImport } from './routes/audio-tracks'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const StudioRoute = StudioImport.update({
  id: '/studio',
  path: '/studio',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const SamplerTracksRoute = SamplerTracksImport.update({
  id: '/sampler-tracks',
  path: '/sampler-tracks',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsRoute = ProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRoute,
} as any)

const OauthCallbackRoute = OauthCallbackImport.update({
  id: '/oauth-callback',
  path: '/oauth-callback',
  getParentRoute: () => rootRoute,
} as any)

const MidiTracksRoute = MidiTracksImport.update({
  id: '/midi-tracks',
  path: '/midi-tracks',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const DrumTracksRoute = DrumTracksImport.update({
  id: '/drum-tracks',
  path: '/drum-tracks',
  getParentRoute: () => rootRoute,
} as any)

const AudioTracksRoute = AudioTracksImport.update({
  id: '/audio-tracks',
  path: '/audio-tracks',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/audio-tracks': {
      id: '/audio-tracks'
      path: '/audio-tracks'
      fullPath: '/audio-tracks'
      preLoaderRoute: typeof AudioTracksImport
      parentRoute: typeof rootRoute
    }
    '/drum-tracks': {
      id: '/drum-tracks'
      path: '/drum-tracks'
      fullPath: '/drum-tracks'
      preLoaderRoute: typeof DrumTracksImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/midi-tracks': {
      id: '/midi-tracks'
      path: '/midi-tracks'
      fullPath: '/midi-tracks'
      preLoaderRoute: typeof MidiTracksImport
      parentRoute: typeof rootRoute
    }
    '/oauth-callback': {
      id: '/oauth-callback'
      path: '/oauth-callback'
      fullPath: '/oauth-callback'
      preLoaderRoute: typeof OauthCallbackImport
      parentRoute: typeof rootRoute
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/sampler-tracks': {
      id: '/sampler-tracks'
      path: '/sampler-tracks'
      fullPath: '/sampler-tracks'
      preLoaderRoute: typeof SamplerTracksImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/studio': {
      id: '/studio'
      path: '/studio'
      fullPath: '/studio'
      preLoaderRoute: typeof StudioImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/audio-tracks': typeof AudioTracksRoute
  '/drum-tracks': typeof DrumTracksRoute
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/midi-tracks': typeof MidiTracksRoute
  '/oauth-callback': typeof OauthCallbackRoute
  '/projects': typeof ProjectsRoute
  '/register': typeof RegisterRoute
  '/sampler-tracks': typeof SamplerTracksRoute
  '/settings': typeof SettingsRoute
  '/studio': typeof StudioRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/audio-tracks': typeof AudioTracksRoute
  '/drum-tracks': typeof DrumTracksRoute
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/midi-tracks': typeof MidiTracksRoute
  '/oauth-callback': typeof OauthCallbackRoute
  '/projects': typeof ProjectsRoute
  '/register': typeof RegisterRoute
  '/sampler-tracks': typeof SamplerTracksRoute
  '/settings': typeof SettingsRoute
  '/studio': typeof StudioRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/audio-tracks': typeof AudioTracksRoute
  '/drum-tracks': typeof DrumTracksRoute
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/midi-tracks': typeof MidiTracksRoute
  '/oauth-callback': typeof OauthCallbackRoute
  '/projects': typeof ProjectsRoute
  '/register': typeof RegisterRoute
  '/sampler-tracks': typeof SamplerTracksRoute
  '/settings': typeof SettingsRoute
  '/studio': typeof StudioRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/audio-tracks'
    | '/drum-tracks'
    | '/home'
    | '/login'
    | '/midi-tracks'
    | '/oauth-callback'
    | '/projects'
    | '/register'
    | '/sampler-tracks'
    | '/settings'
    | '/studio'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/audio-tracks'
    | '/drum-tracks'
    | '/home'
    | '/login'
    | '/midi-tracks'
    | '/oauth-callback'
    | '/projects'
    | '/register'
    | '/sampler-tracks'
    | '/settings'
    | '/studio'
  id:
    | '__root__'
    | '/'
    | '/audio-tracks'
    | '/drum-tracks'
    | '/home'
    | '/login'
    | '/midi-tracks'
    | '/oauth-callback'
    | '/projects'
    | '/register'
    | '/sampler-tracks'
    | '/settings'
    | '/studio'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AudioTracksRoute: typeof AudioTracksRoute
  DrumTracksRoute: typeof DrumTracksRoute
  HomeRoute: typeof HomeRoute
  LoginRoute: typeof LoginRoute
  MidiTracksRoute: typeof MidiTracksRoute
  OauthCallbackRoute: typeof OauthCallbackRoute
  ProjectsRoute: typeof ProjectsRoute
  RegisterRoute: typeof RegisterRoute
  SamplerTracksRoute: typeof SamplerTracksRoute
  SettingsRoute: typeof SettingsRoute
  StudioRoute: typeof StudioRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AudioTracksRoute: AudioTracksRoute,
  DrumTracksRoute: DrumTracksRoute,
  HomeRoute: HomeRoute,
  LoginRoute: LoginRoute,
  MidiTracksRoute: MidiTracksRoute,
  OauthCallbackRoute: OauthCallbackRoute,
  ProjectsRoute: ProjectsRoute,
  RegisterRoute: RegisterRoute,
  SamplerTracksRoute: SamplerTracksRoute,
  SettingsRoute: SettingsRoute,
  StudioRoute: StudioRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/audio-tracks",
        "/drum-tracks",
        "/home",
        "/login",
        "/midi-tracks",
        "/oauth-callback",
        "/projects",
        "/register",
        "/sampler-tracks",
        "/settings",
        "/studio"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/audio-tracks": {
      "filePath": "audio-tracks.tsx"
    },
    "/drum-tracks": {
      "filePath": "drum-tracks.tsx"
    },
    "/home": {
      "filePath": "home.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/midi-tracks": {
      "filePath": "midi-tracks.tsx"
    },
    "/oauth-callback": {
      "filePath": "oauth-callback.tsx"
    },
    "/projects": {
      "filePath": "projects.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/sampler-tracks": {
      "filePath": "sampler-tracks.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/studio": {
      "filePath": "studio.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
